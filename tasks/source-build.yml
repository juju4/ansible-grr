---
# https://grr-doc.readthedocs.io/en/latest/installing-grr-server/from-source.html
# https://github.com/google/grr/blob/master/travis/install.sh

- name: Source | install grr source dependencies
  package:
    name: "{{ grrserver_src_deps }}"
    state: present

- name: github release prefix
  set_fact:
    grr_r: "v{{ grr_r }}"
  when: grr_r != 'HEAD'

- name: Source | git clone Grr repository
  git:
    repo: https://github.com/google/grr.git
    dest: /root/grr
    version: "{{ grr_version | default(grr_r ) }}"

- name: Source | create venv
  command: "{{ grr_python_bin | default('python') }} -m venv {{ grr_env }}"
  args:
    creates: "{{ grr_env }}/bin/activate"

- name: Source | set grr virtualenv with latest pip and setuptools
  pip:
    name: "{{ item.n }}"
    version: "{{ item.v }}"
    virtualenv: "{{ grr_env }}"
    virtualenv_command: "{{ grr_python_bin | default('python') }}"
  with_items:
    - { n: pip, v: 19.3.1 }
    - { n: setuptools, v: 41.2.0 }
  register: pkg_result
  until: pkg_result is success

- name: Source | set grr virtualenv (2)
  pip:
    name:
      - wheel
      - six
      - nodeenv
    virtualenv: "{{ grr_env }}"
    virtualenv_python: "{{ grr_python_bin | default('python') }}"
  register: pkg_result
  until: pkg_result is success

- name: Source | Force nodeenv to 12.11.1
  command: "{{ grr_env }}/bin/nodeenv -p --prebuilt --node=12.11.1"
  args:
    chdir: /root/grr

- name: Source | set grr virtualenv (2)
  pip:
    name:
      - https://github.com/chipsec/chipsec/archive/python3-beta.zip
    virtualenv: "{{ grr_env }}"
    virtualenv_command: "{{ grr_python_bin | default('python') }}"
    extra_args: '--install-option="--skip-driver"'
  register: pkg_result
  until: pkg_result is success
  when: grr_python_bin == 'python3' or grr_python_bin == 'python36'

- name: Source | set grr virtualenv (3)
#  pip:
#    name:
#      - file:///root/grr/grr/proto
#      - file:///root/grr/grr/core
#      - file:///root/grr/grr/client
#      - file:///root/grr/api_client/python
#      - file:///root/grr/grr/client_builder
#      - file:///root/grr/grr/server/[mysqldatastore]
#      - file:///root/grr/colab
#      - file:///root/grr/grr/test
#    virtualenv: "{{ grr_env }}"
#    virtualenv_python: "{{ grr_python_bin | default('python') }}"
#  register: pkg_result
#  until: pkg_result is success
#  shell: "source {{ grr_env }}/bin/activate; pip install -e {{ item }} --progress-bar off"
  shell: "{{ grr_env }}/bin/pip install -e {{ item }} --progress-bar off"
  with_items:
    - grr/proto
    - grr/core
    - grr/client
    - api_client/python
    - grr/client_builder
    - grr/server/[mysqldatastore]
    - colab
    - grr/test
  environment:
    PATH: "{{ grr_env }}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin"
  args:
    chdir: /root/grr

- name: Source | Proto Python make
  shell: "source {{ grr_env }}/bin/activate; python makefile.py"
  args:
    chdir: /root/grr/grr/proto

- name: Source | Artifacts Python make
  shell: "source {{ grr_env }}/bin/activate; python makefile.py"
  args:
    chdir: /root/grr/grr/core/grr_response_core/artifacts
