---

- name: Include version-specific variables for Ubuntu.
  include_vars: "{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml"
  when: ansible_distribution == 'Ubuntu'
- name: Include version-specific variables for RedHat
  include_vars: "RedHat-{{ ansible_distribution_version.split('.')[0] }}.yml"
  when: ansible_os_family == "RedHat"

- name: Set grr dependencies for python2
  set_fact:
    _grrserver_pkg: "{{ grrserver_pkg + grr_python2_pkgs }}"
  when: grr_python_bin == 'python'
- name: Set grr dependencies for python3
  set_fact:
    _grrserver_pkg: "{{ grrserver_pkg + grr_python3_pkgs }}"
  when: grr_python_bin != 'python'
- debug:
    var: _grrserver_pkg
    verbosity: 1

- include: debian.yml
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- include: redhat.yml
  when: ansible_os_family == "RedHat"

- include: datastore-mysql.yml
  when: grr_datastore is defined and grr_datastore == 'MysqlAdvanced' and grr_datastore_mysql_host == 'localhost'

- name: Review some limits for SQLite datastore
  sysctl: name="fs.file-max" value=1048576 sysctl_set=yes state=present reload=yes
  when: >
    not (ansible_virtualization_type is defined and
          (ansible_virtualization_type == "lxc" or ansible_virtualization_type == "docker")
        )
##  End grr/scripts/install_script_ubuntu.sh: BUILD_DEPS_ONLY

### from docker script but is it relevant here
#- name: Compile protos
#  command: make chdir=/usr/share/grr/proto
#- name: Remove old grr installed by the deb package and overwrite it with repository one
#  command: "{{ item }} chdir=/usr/share/grr"
#  with_items:
#    - rm -rf /usr/lib/python2.7/dist-packages/grr
#    - python setup.py build
#    - python setup.py install

- include: grr-configure.yml

- block:
    - name: systemd | add systemd scripts
      get_url: "url={{ item.u }} dest={{ systemd_lib }}/{{ item.d }} mode=0644 checksum={{ item.c }}"
      with_items:
        - { u: 'https://raw.githubusercontent.com/google/grr/master/debian/grr-server.service',
            d: 'grr.server.service',
            c: 'sha256:c9ea665fc7d7428d92f63c64094415688dd7f6553a0826a27f5e66d0a525e0e6'
          }
        - { u: 'https://raw.githubusercontent.com/google/grr/master/debian/grr-server%40.service',
            d: 'grr-server@.service',
            c: 'sha256:63f0d636fdffa452a97caef8e14e151a0c1bfa109e6da1385c335c64b9bee87f'
          }
      notify:
        - systemd reload
    - name: systemd | update path
      replace:
        dest: "{{ systemd_lib }}/grr-server@.service"
        regexp: /usr/bin/grr_
        replace: "{{ grr_bindir }}/grr_"
        backup: yes
      notify:
        - systemd reload
  when: >
    (ansible_os_family == "RedHat" and ansible_distribution_major_version|int >= 7) or
    (ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int > 16)

- meta: flush_handlers

- name: ensure grr-server service started and enabled
  service:
    name: "{{ grr_svc }}"
    state: started
    enabled: yes
  when: >
    (
      (ansible_os_family == "RedHat" and ansible_distribution_major_version|int >= 7) or
      (ansible_distribution == "Ubuntu" and ansible_distribution_major_version|int >= 16)
    ) and
    not (ansible_virtualization_type is defined and ansible_virtualization_type == "docker")

- name: little delay to ensure service is fully available
  pause:
    seconds: 3
